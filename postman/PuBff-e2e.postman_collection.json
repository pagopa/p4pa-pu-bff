{
	"info": {
		"_postman_id": "3ff2d89f-c05c-42c2-b319-6f6b67bd1a51",
		"name": "PU-BFF",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36568841"
	},
	"item": [
		{
			"name": "00_login",
			"item": [
				{
					"name": "00_authtoken jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm=instrumentPmMethod(pm);\r",
									"\r",
									"pm.test(\"MyPay - 01_authtoken - Responses with 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"MyPay - 01_authtoken jwt - Verify response body\", function () {\r",
									"    let jsonResponse = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonResponse).have.property(\"accessToken\")\r",
									"    pm.expect(jsonResponse).have.property(\"tokenType\")\r",
									"    pm.expect(jsonResponse).have.property(\"expiresIn\")\r",
									"});\r",
									"\r",
									"let jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"accessToken\", jsonResponse.accessToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{p4paAuthBaseUrl}}/payhub/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
							"host": [
								"{{p4paAuthBaseUrl}}"
							],
							"path": [
								"payhub",
								"auth",
								"token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "piattaforma-unitaria"
								},
								{
									"key": "grant_type",
									"value": "urn:ietf:params:oauth:grant-type:token-exchange"
								},
								{
									"key": "subject_token",
									"value": "{{tokenExchange_subjectToken}}"
								},
								{
									"key": "subject_issuer",
									"value": "{{tokenExchange_issuer}}"
								},
								{
									"key": "scope",
									"value": "openid"
								},
								{
									"key": "subject_token_type",
									"value": "urn:ietf:params:oauth:token-type:jwt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01_Organization",
			"item": [
				{
					"name": "01_getBrokerConfig",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"[brokers - config], expected httpStatus: 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"[brokers - config] - get list of config\", () => {\r",
									"    pm.expect(jsonResponse.headerAssistanceUrl).not.null;\r",
									"    pm.expect(jsonResponse.logoFooterImg).not.null;\r",
									"    pm.expect(jsonResponse.footerDescText).not.null;\r",
									"    pm.expect(jsonResponse.footerPrivacyInfoUrl).not.null;\r",
									"    pm.expect(jsonResponse.footerGDPRUrl).not.null;\r",
									"    pm.expect(jsonResponse.footerTermsCondUrl).not.null;\r",
									"    pm.expect(jsonResponse.footerAccessibilityUrl).not.null;\r",
									"    pm.expect(jsonResponse.brokerId).be.null;\r",
									"    pm.expect(jsonResponse.canManageUsers).be.null;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{puBffBaseUrl}}/brokers/config",
							"host": [
								"{{puBffBaseUrl}}"
							],
							"path": [
								"brokers",
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "01_getOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"[organizations], expected httpStatus: 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"[organizations] - get list of organizations\", () => {\r",
									"    pm.expect(jsonResponse.organizationId).not.null;\r",
									"    pm.expect(jsonResponse.ipaCode).not.null;\r",
									"    pm.expect(jsonResponse.orgName).not.null;\r",
									"    pm.expect(jsonResponse.operatorRole).not.null;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{puBffBaseUrl}}/organizations",
							"host": [
								"{{puBffBaseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "99_Monitoring",
			"item": [
				{
					"name": "99_coreHealthIndicator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"expected httpStatus: 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.response.json().forEach((item) => {\r",
									"    pm.expect(item.serviceName).not.null;\r",
									"    pm.expect(item.statusMessage).to.eql(\"\\\"status\\\":\\\"UP\\\"\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{puBffBaseUrl}}/bff/health",
							"host": [
								"{{puBffBaseUrl}}"
							],
							"path": [
								"bff",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// START COMMON UTILITIES\r",
					"\r",
					"// global variable to use in order to skip tests\r",
					"skipTests=false;\r",
					"\r",
					"// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:\r",
					"// eg: pm = pm=instrumentPmMethod(pm);\r",
					"instrumentPmMethod = (pm) => {\r",
					"    const pmProxy = {\r",
					"        get: function(pm, key) {\r",
					"            if (key == 'test') {\r",
					"                return (skipTests ? pm.test.skip : pm.test);\r",
					"            }\r",
					"            return pm[key];\r",
					"        }\r",
					"    };\r",
					"\r",
					"    return new Proxy(pm, pmProxy);\r",
					"}\r",
					"\r",
					"// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke\r",
					"retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {\r",
					"    if(!pm || !setTimeout){\r",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)\r",
					"    }\r",
					"\r",
					"    const retryVariableName = \"retry_\" + pm.info.requestId\r",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;\r",
					"    if(attempt < maxAttempts) {\r",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");\r",
					"        pm.variables.set(retryVariableName, attempt)\r",
					"        pm.execution.setNextRequest(pm.info.requestId);\r",
					"        return setTimeout(()=>{}, waitingMillis);\r",
					"    } else {\r",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));\r",
					"    }\r",
					"}\r",
					"\r",
					"// function to be used in order to retry the current request until it returns a known response HTTP status code\r",
					"retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {\r",
					"    if(pm.response.code == statusCode){\r",
					"        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")\r",
					"        skipTests=true;\r",
					"        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)\r",
					"    }\r",
					"}\r",
					"\r",
					"// XML utilities\r",
					"xml2js = require('xml2js');\r",
					"\r",
					"parseXmlResponse = (response) => {\r",
					"    let body;\r",
					"    xml2js.parseString(response.text(), {\r",
					"            ignoreAttrs: true, \r",
					"            explicitArray: false,\r",
					"        }, function (err, result) {\r",
					"            if(err){\r",
					"                console.error(err)\r",
					"            }\r",
					"        body = result;\r",
					"    });\r",
					"    return body;\r",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": ""
		}
	]
}
