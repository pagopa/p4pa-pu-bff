{
  "info": {
    "_postman_id": "f59c9af8-6820-427e-a1cb-206c7c46fc6a",
    "name": "PU-BFF",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "9202061"
  },
  "item": [
    {
      "name": "00_login",
      "item": [
        {
          "name": "00_authtoken jwt",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm=instrumentPmMethod(pm);\r",
                  "\r",
                  "pm.test(\"MyPay - 01_authtoken - Responses with 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"MyPay - 01_authtoken jwt - Verify response body\", function () {\r",
                  "    let jsonResponse = pm.response.json();\r",
                  "\r",
                  "    pm.expect(jsonResponse).have.property(\"access_token\")\r",
                  "    pm.expect(jsonResponse).have.property(\"token_type\")\r",
                  "    pm.expect(jsonResponse).have.property(\"expires_in\")\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "pm.collectionVariables.set(\"accessToken\", jsonResponse.access_token);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{p4paAuthBaseUrl}}/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
              "host": [
                "{{p4paAuthBaseUrl}}"
              ],
              "path": [
                "auth",
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "piattaforma-unitaria"
                },
                {
                  "key": "grant_type",
                  "value": "urn:ietf:params:oauth:grant-type:token-exchange"
                },
                {
                  "key": "subject_token",
                  "value": "{{tokenExchange_subjectToken}}"
                },
                {
                  "key": "subject_issuer",
                  "value": "{{tokenExchange_issuer}}"
                },
                {
                  "key": "scope",
                  "value": "openid"
                },
                {
                  "key": "subject_token_type",
                  "value": "urn:ietf:params:oauth:token-type:jwt"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "01_Organization",
      "item": [
        {
          "name": "01_getBrokerConfig",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[brokers - config], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[brokers - config] - get list of config\", () => {\r",
                  "    pm.expect(jsonResponse.headerAssistanceUrl).not.null;\r",
                  "    pm.expect(jsonResponse.logoFooterImg).not.null;\r",
                  "    pm.expect(jsonResponse.footerDescText).not.null;\r",
                  "    pm.expect(jsonResponse.footerPrivacyInfoUrl).not.null;\r",
                  "    pm.expect(jsonResponse.footerGDPRUrl).not.null;\r",
                  "    pm.expect(jsonResponse.footerTermsCondUrl).not.null;\r",
                  "    pm.expect(jsonResponse.footerAccessibilityUrl).not.null;\r",
                  "    pm.expect(jsonResponse.brokerId).be.null;\r",
                  "    pm.expect(jsonResponse.canManageUsers).be.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}/brokers/config",
              "host": [
                "{{puBffBaseUrl}}"
              ],
              "path": [
                "brokers",
                "config"
              ]
            }
          },
          "response": []
        },
        {
          "name": "01_getOrganizations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[organizations], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[organizations] - get list of organizations\", () => {\r",
                  "    pm.expect(jsonResponse.organizationId).not.null;\r",
                  "    pm.expect(jsonResponse.ipaCode).not.null;\r",
                  "    pm.expect(jsonResponse.orgName).not.null;\r",
                  "    pm.expect(jsonResponse.operatorRole).not.null;\r",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}/organizations",
              "host": [
                "{{puBffBaseUrl}}"
              ],
              "path": [
                "organizations"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "02_Taxonomy",
      "item": [
        {
          "name": "02_getOrganizationTypes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[taxonomy getOrganizationTypes], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[taxonomy getOrganizationTypes] - getOrganizationTypes\", () => {\r",
                  "    pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                  "\r",
                  "    pm.expect(jsonResponse[0].organizationType).not.null;\r",
                  "    pm.expect(jsonResponse[0].organizationTypeDescription).not.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}taxonomy/getOrganizationTypes",
              "host": [
                "{{puBffBaseUrl}}taxonomy"
              ],
              "path": [
                "getOrganizationTypes"
              ]
            }
          },
          "response": []
        },
        {
          "name": "02_getMacroArea",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[taxonomy getMacroArea], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[taxonomy getMacroArea] - getMacroArea\", () => {\r",
                  "    pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                  "\r",
                  "    pm.expect(jsonResponse[0].organizationType).not.null;\r",
                  "    pm.expect(jsonResponse[0].organizationTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaName).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaDescription).not.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}taxonomy/getMacroArea?organizationType=01",
              "host": [
                "{{puBffBaseUrl}}taxonomy"
              ],
              "path": [
                "getMacroArea"
              ],
              "query": [
                {
                  "key": "organizationType",
                  "value": "01"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "02_getServiceType",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[taxonomy getServiceType], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[taxonomy getServiceType] - getServiceType\", () => {\r",
                  "    pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                  "\r",
                  "    pm.expect(jsonResponse[0].organizationType).not.null;\r",
                  "    pm.expect(jsonResponse[0].organizationTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaName).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceType).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeDescription).not.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}taxonomy/getServiceType?organizationType=01&macroAreaCode=01",
              "host": [
                "{{puBffBaseUrl}}taxonomy"
              ],
              "path": [
                "getServiceType"
              ],
              "query": [
                {
                  "key": "organizationType",
                  "value": "01"
                },
                {
                  "key": "macroAreaCode",
                  "value": "01"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "02_getCollectionReason",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[taxonomy getCollectionReason], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[taxonomy getCollectionReason] - getTaxonomyCode\", () => {\r",
                  "    pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                  "\r",
                  "    pm.expect(jsonResponse[0].organizationType).not.null;\r",
                  "    pm.expect(jsonResponse[0].organizationTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaName).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceType).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].collectionReason).not.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}taxonomy/getCollectionReason?organizationType=01&macroAreaCode=01&serviceTypeCode=100",
              "host": [
                "{{puBffBaseUrl}}taxonomy"
              ],
              "path": [
                "getCollectionReason"
              ],
              "query": [
                {
                  "key": "organizationType",
                  "value": "01"
                },
                {
                  "key": "macroAreaCode",
                  "value": "01"
                },
                {
                  "key": "serviceTypeCode",
                  "value": "100"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "02_getTaxonomyCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"[taxonomy getTaxonomyCode], expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.test(\"[taxonomy getTaxonomyCode] - getTaxonomyCode\", () => {\r",
                  "    pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                  "\r",
                  "    pm.expect(jsonResponse[0].organizationType).not.null;\r",
                  "    pm.expect(jsonResponse[0].organizationTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaName).not.null;\r",
                  "    pm.expect(jsonResponse[0].macroAreaDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeCode).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceType).not.null;\r",
                  "    pm.expect(jsonResponse[0].serviceTypeDescription).not.null;\r",
                  "    pm.expect(jsonResponse[0].collectionReason).not.null;\r",
                  "    pm.expect(jsonResponse[0].taxonomyCode).not.null;\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}taxonomy/getTaxonomyCode?organizationType=01&macroAreaCode=01&serviceTypeCode=100&collectionReason=IM",
              "host": [
                "{{puBffBaseUrl}}taxonomy"
              ],
              "path": [
                "getTaxonomyCode"
              ],
              "query": [
                {
                  "key": "organizationType",
                  "value": "01"
                },
                {
                  "key": "macroAreaCode",
                  "value": "01"
                },
                {
                  "key": "serviceTypeCode",
                  "value": "100"
                },
                {
                  "key": "collectionReason",
                  "value": "IM"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "99_Monitoring",
      "item": [
        {
          "name": "99_coreHealthIndicator",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "let jsonResponse = pm.response.json();\r",
                  "\r",
                  "pm.test(\"expected httpStatus: 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "pm.response.json().forEach((item) => {\r",
                  "    pm.expect(item.serviceName).not.null;\r",
                  "    pm.expect(item.statusMessage).to.eql(\"{\\\"status\\\":\\\"UP\\\"}\");\r",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{puBffBaseUrl}}/core-health",
              "host": [
                "{{puBffBaseUrl}}"
              ],
              "path": [
                "core-health"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "// START COMMON UTILITIES\r",
          "\r",
          "// global variable to use in order to skip tests\r",
          "skipTests=false;\r",
          "\r",
          "// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:\r",
          "// eg: pm = pm=instrumentPmMethod(pm);\r",
          "instrumentPmMethod = (pm) => {\r",
          "    const pmProxy = {\r",
          "        get: function(pm, key) {\r",
          "            if (key == 'test') {\r",
          "                return (skipTests ? pm.test.skip : pm.test);\r",
          "            }\r",
          "            return pm[key];\r",
          "        }\r",
          "    };\r",
          "\r",
          "    return new Proxy(pm, pmProxy);\r",
          "}\r",
          "\r",
          "// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke\r",
          "retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {\r",
          "    if(!pm || !setTimeout){\r",
          "        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)\r",
          "    }\r",
          "\r",
          "    const retryVariableName = \"retry_\" + pm.info.requestId\r",
          "    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;\r",
          "    if(attempt < maxAttempts) {\r",
          "        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");\r",
          "        pm.variables.set(retryVariableName, attempt)\r",
          "        pm.execution.setNextRequest(pm.info.requestId);\r",
          "        return setTimeout(()=>{}, waitingMillis);\r",
          "    } else {\r",
          "        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));\r",
          "    }\r",
          "}\r",
          "\r",
          "// function to be used in order to retry the current request until it returns a known response HTTP status code\r",
          "retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {\r",
          "    if(pm.response.code == statusCode){\r",
          "        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")\r",
          "        skipTests=true;\r",
          "        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)\r",
          "    }\r",
          "}\r",
          "\r",
          "// XML utilities\r",
          "xml2js = require('xml2js');\r",
          "\r",
          "parseXmlResponse = (response) => {\r",
          "    let body;\r",
          "    xml2js.parseString(response.text(), {\r",
          "            ignoreAttrs: true, \r",
          "            explicitArray: false,\r",
          "        }, function (err, result) {\r",
          "            if(err){\r",
          "                console.error(err)\r",
          "            }\r",
          "        body = result;\r",
          "    });\r",
          "    return body;\r",
          "};"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "accessToken",
      "value": ""
    }
  ]
}
